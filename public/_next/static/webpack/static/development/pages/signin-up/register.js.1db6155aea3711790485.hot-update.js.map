{"version":3,"file":"static/webpack/static\\development\\pages\\signin-up\\register.js.1db6155aea3711790485.hot-update.js","sources":["webpack:///./components/partialComponents/registerSignInComponent/signupComponent.js"],"sourcesContent":["import React , {useState} from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormBuilder from '../../formBuilderComponent/formComponent';\r\nimport Validator from '../../classes/validator';\r\nimport {StyleContext} from '../../contextAPI/styleContext';\r\nimport ErrorModal from '../../modals/errorModalComponent';\r\nimport {SuccessComponent , FailureComponent , LoaderComponent } from '../../statelessComponents/loadMoreProductsComponent';\r\nconst axios = require('axios');\r\nconst API = require(\"../../../api/config.property\");\r\nconst validate = new Validator();\r\n\r\nexport default class SignupComponent extends React.PureComponent {\r\n  static contextType = StyleContext ;\r\n    constructor(props){\r\n        super(props);\r\n        this.submitRef = React.createRef();\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.handleSubmitState = this.handleSubmitState.bind(this);\r\n        this.checkEmailAvailability = this.checkEmailAvailability.bind(this);\r\n        this.handleShow = this.handleShow.bind(this);\r\n        this.removeInvalidElement = this.removeInvalidElement.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.comparePasswords = this.comparePasswords.bind(this);\r\n        this.state = {\r\n          disableSubmit : true,\r\n          formFields : [],\r\n          showEmailLoader : false,\r\n          showError : false,\r\n          errorMessage : \"\",\r\n          submitLabel : \"Register\",\r\n          registered : false,\r\n          registering : false,\r\n          failed : false\r\n        }\r\n         this.modalProps = {\r\n          onHide : this.onHide,\r\n          message : \"This email is already reserved .\",\r\n          header : \"Validation Error\"\r\n         }\r\n\r\n         this.formData = [{ \r\n                           label : \"First Name\" ,\r\n                           type : \"text\",\r\n                           placeholder : \"Enter your firstname\",\r\n                           controlId : \"firstNameController\",\r\n                           validate : true,\r\n                           required : true,\r\n                           validationRules : {minLength : 6 , maxLength : 12 },\r\n                           class : \"default\",\r\n                           change : this.onChange,\r\n                           name : \"firstName\",\r\n                           showLoader : false\r\n                          },\r\n                          {\r\n                            label : \"Last Name\" ,\r\n                            type : \"text\",\r\n                            placeholder : \"Enter your lastname\",\r\n                            controlId : \"lastNameController\",\r\n                            validate : true,\r\n                            required : true,\r\n                            class : \"default\",\r\n                            validationRules : {minLength : 6 , maxLength : 12 },\r\n                            change : this.onChange,\r\n                            name : \"lasName\",\r\n                            showLoader : false\r\n                         },\r\n                          {\r\n                            label : \"Email Address\" ,\r\n                            type : \"email\",\r\n                            placeholder : \"Enter your emil address\",\r\n                            controlId : \"emailController\",\r\n                            note : \"We'll never share your email with anyone else.\" ,\r\n                            validate : true,\r\n                            required : true,\r\n                            class : \"text-muted default\",\r\n                            validationRules : { emailValidator : \"\" },\r\n                            change : this.onChange,\r\n                            name :\"email\",\r\n                            showLoader : false\r\n                         },                        \r\n                        {\r\n                          label : \"Password\" ,\r\n                          type : \"password\",\r\n                          placeholder : \"Enter your password\",\r\n                          controlId : \"passwordController\",\r\n                          validate : true,\r\n                          required : true,\r\n                          class : \"default\",\r\n                          validationRules : { minLength : 8 , passwordValidator : \"\" },\r\n                          change : this.onChange,\r\n                          note : \"Your password should be at least 8 characters long alphanumeric .\" ,\r\n                          name : \"password\",\r\n                          showLoader : false\r\n                        },\r\n                        {\r\n                          label : \"Confirm Password\" ,\r\n                          type : \"password\",\r\n                          placeholder : \"Enter your password\",\r\n                          controlId : \"confirmPasswordController\",\r\n                          validate : true,\r\n                          required : true,\r\n                          class : \"default\",\r\n                          validationRules : { minLength : 8 , passwordValidator : \"\" , dependents: [\"passwordController\"] },\r\n                          change : this.onChange,\r\n                          note : \"This field should match the above one .\",\r\n                          name : \"cPassword\",\r\n                          showLoader : false\r\n                        },{\r\n                          note : \"By creating an account, you agree to our Conditions of Use and Privacy Notice.\",\r\n                          type : \"none\",\r\n                          class : \"text-muted\",\r\n\r\n                        }\r\n                      ] ;\r\n    }\r\n    handleShow() {\r\n      this.setState({showError : true});\r\n    }\r\n    handleClose(){\r\n      this.setState({showError : false});\r\n    }\r\n    handleSubmit(){\r\n      event.preventDefault();\r\n      const matched = this.comparePasswords();\r\n      console.log(this.state.formFields);\r\n      if(!matched) {return}\r\n      this.setState({submitLabel : \"Please wait ..\" , registering : true });\r\n      this.handleSubmitState(true);\r\n      let requestData = {};\r\n      this.state.formFields.map((field , index) => {\r\n        requestData[field.name] = field.value;\r\n      });\r\n\r\n      delete requestData['cPassword'];\r\n      console.log(\"submitting :: \" + requestData + \"--\"+API.USERS_API);\r\n      axios.post(API.USERS_API, requestData )\r\n      .then(function (response) {\r\n        console.log(response);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        let errorMsg = \"\" , code = \"\";\r\n        if(error.error) {\r\n          errorMsg = error.error.message;\r\n          code = error.error.code;\r\n        }\r\n        this.setState({submitLabel : \"Register\" , registering : false , showError : true , errorMessage : errorMsg });\r\n        this.handleSubmitState(false);\r\n      });\r\n    }\r\n    handleSubmitState(state) {\r\n      if(state){\r\n        validate.disabledElem(this.submitRef);\r\n      }else{\r\n        validate.enableElem(this.submitRef);\r\n      }\r\n    }\r\n    comparePasswords() {\r\n      let valid = true ;\r\n      const password = this.state.formFields.find((_) => _.name == \"password\");\r\n      const confirmPassword = this.state.formFields.find((_) => _.name == \"cPassword\");\r\n      const error = \"Sorry, your passwords are not matching !\";\r\n      if(undefined !== password && undefined !== confirmPassword ){\r\n         if(password.value !== confirmPassword.value) {\r\n           this.setState({showError : true, errorMessage : error , registering : false})\r\n           confirmPassword.ref.classList.remove(\"valid\");\r\n           confirmPassword.ref.classList.add(\"in-valid\");\r\n           this.removeInvalidElement(confirmPassword); \r\n           valid = false;\r\n           validate.disabledElem(this.submitRef);\r\n         }\r\n      }\r\n      return valid;\r\n    }\r\n    async checkEmailAvailability(response , elem ) {\r\n      this.setState({showEmailLoader : true });\r\n      /***** checking email ****/\r\n      await new Promise( (resolve) => {\r\n        setTimeout(() => {\r\n          let { value , ref } = response[0][0];\r\n          let email = this.state.formFields.find((_) => _.name == \"email\");\r\n           if(\"amine.admin@mail.com\" !== value ) {\r\n             this.setState({showError : true, errorMessage : `The email ** ${value} ** is already registered in our database, please use a different one or reset your password .`})\r\n             ref.classList.remove(\"valid\");\r\n             ref.classList.add(\"in-valid\");\r\n             response = [];\r\n             this.removeInvalidElement(elem);          \r\n           }\r\n           console.log(\"after 1 sec\");\r\n           resolve();\r\n        }, 1000);\r\n      }) \r\n        \r\n      /**** remove loader *****/\r\n      await new Promise( (resolve) => {\r\n      setTimeout(()=>{\r\n        this.setState({showEmailLoader : false }); \r\n        resolve();\r\n         }, 3000);\r\n       });  \r\n    }\r\n    onChange(){\r\n      let response = [] , self = this;\r\n      let currentElement = JSON.parse(event.target.dataset.formdata);\r\n      response = validate.validate(event);\r\n        /**** remove invalid fields ****/\r\n        if(response[0].length == 0){\r\n           this.removeInvalidElement(currentElement);  \r\n        }else{\r\n          /***** compare passwords *****/\r\n          /*** if(\"password\" == currentElement.name || \"cPassword\" == currentElement.name){\r\n            this.comparePasswords(response , currentElement);\r\n          } ***/\r\n          console.log(\"immediate\");\r\n          /**** set the returned validation values ***/\r\n          response[0].map((resp , index ) => {\r\n             undefined == self.state.formFields.find((_) => _.name == resp.name) ?\r\n             self.setState({formFields : \r\n              [...self.state.formFields , resp ] }, () => {\r\n                 this.handleSubmitState(!(self.state.formFields.length == 5 ));\r\n            }) : null;\r\n          });\r\n          /****** ends *****/\r\n      }   \r\n    }\r\n    removeInvalidElement(currentElement){\r\n      this.setState({formFields : this.state.formFields.filter(_ => _.name !== currentElement.name ) , showError :false , errorMessage : \"\"}, ()=>{\r\n        this.handleSubmitState(!(this.state.formFields.length == 5 ));\r\n       \r\n      }); \r\n    }\r\n    componentDidMount(){\r\n      validate.disabledElem(this.submitRef);\r\n    }\r\n    render() {\r\n      const { value } = this.context;\r\n        return (\r\n             <div className=\"container __registeration_form\">\r\n                 <div className=\"row\">\r\n                     <div className=\"col-xs-12\">\r\n                       <div className =\"__registration_form_wrapper\">\r\n                        <Form>\r\n                           { \r\n                             this.formData.map((form , index) => {\r\n                               \"email\" == form.name ? form.showLoader = this.state.showEmailLoader : null;\r\n                               return <FormBuilder key = {index} props = {form}/>\r\n                             })  \r\n                           }\r\n                            <Form.Group controlId=\"formBasicPassword\" className = \"col-xs-5\" style = {{paddingLeft:0}}>\r\n                              <a ref = {this.submitRef} className=\"customButton __checkout_confirm_btn\" onClick = {this.handleSubmit}>\r\n                                   { this.state.submitLabel }\r\n                               { this.state.registered ?  <SuccessComponent label = \"\" paragraph = {false} class = \"instock\"/> : null } \r\n                               { this.state.registering ? <LoaderComponent label = \"\" paragraph = {false}/> : null }\r\n                               { this.state.failed ?  <FailureComponent label = \"\" paragraph = {false} class = \"outofstock\"/> : null } \r\n                             </a> \r\n                            </Form.Group>\r\n                           {this.state.showError ? <Form.Group controlId=\"formBasicPassword\" className = \"col-xs-7 reg-error\">{this.state.errorMessage}</Form.Group> : null }\r\n                        </Form> \r\n                      </div>  \r\n                     </div>\r\n                     \r\n                 </div>\r\n                  {/**this.state.showError ? <ErrorModal errorMessage = {this.state.errorMessage} show = {this.state.showError} handleClose = {this.handleClose}/> : null**/}\r\n             </div>\r\n        );\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAXA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAZA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAZA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AAHA;AA/FA;AAssourceRoot":""}